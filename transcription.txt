Ruby on Rails, a full stack MVC webframe work famous for powering some of the most successful internet startups of the last 20 years. It was created in 2004 by David Hanemire Hanson to give developers a way to build large-scale web applications quickly with the Ruby programming language. It exploded in popularity among the Silicon Valley tech-browsing and helped launch unicorn startups like Airbnb, Shopify, and GitHub, just to name a few. Its underlying architecture is based on the model view controller pattern. A model contains the business logic for your database. Rails has a built-in ORM called ActiveRecord that can easily model relationships in a SQL database. On the other end, we have the view for presentation logic, which includes a mix of HTML, CSS, and embedded Ruby, which displays dynamic data queried from the back end. This data is made available by the controller, which sits in the middle. It takes the incoming HTTP request from the user, the fetched data from the model, and finally responds with HTML or JSON. This pattern actually predates the web itself, but Rails makes it extremely easy to implement by following a highly opinionated and controversial doctrine, which includes nine commandments like convention over configuration and exult beautiful code. Let's build a full stack application right now by installing Ruby Rails and SQLite. Now run the Rails New command to scaffold out a new project. From here you'll notice a gem file to install dependencies in Ruby, a rake file, which is like a make file in C to run a task, but the bulk of your code will be written in the app directory. In addition to models, views, and controllers, you'll also notice mailers for transactional email, jobs for background work, and channels for real-time connections via web sockets. And we have a JavaScript directory configured with hotwire, allowing you to build a highly interactive front end, without the unnecessary complexity of a JavaScript component framework. Rails also has an extremely powerful CLI. Generate will build your models using controllers, or do everything all at once with scaffold. We give our model a name, which is plural by convention, and then provide some fields and types we might use in the database. This command creates a bunch of files, but let's go ahead and run rake to migrate the database, then Rails server to run it locally. Congratulations, you just built a piece of crud, a full stack app that can create, read, update, and delete your database model in the browser. How did we do that so fast? At first, the routes are v file mapped a set of URLs to our controller. Automatically created by this resources method, when a user navigates to one of those routes, it triggers a controller action. Like index, we'll fetch all the records from the database by calling the all method, which is provided automatically by the model. We could also perform data validations here, and do joins with other models. Now the controller created an instance variable, which we can access directly in the html.inbeddedruby file. Here we have each run the database as a Ruby object, which we can loop over with each to display it in the front end UI. This has been Rails in 100 seconds, but if you really want to learn how to build cool web apps, it's far more important to learn how to problem solve like a programmer. You can start making that happen for free, thanks to this video sponsor, Brilliant. Web frameworks come and go, but problem solving is a skill that you keep forever. Brilliant's platform will introduce you to essential programming concepts, but most importantly, the hands-on exercises will develop your brain to recognize and solve complex problems that developers need to overcome on a daily basis. Best of all, every lesson is concise and rewarding, but by investing just a few minutes each day, you'll develop habits that can level up your programming skills for the rest of your life, and you can do it anywhere, even from your phone. To try everything Brilliant has to offer for free for 30 days, visit brilliant.org slash-fireship or scan this QR code for 20% off their premium annual subscription. Thanks for watching, and I will see you in the next one.